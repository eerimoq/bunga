syntax = "proto3";

package bunga;

message ClientToServer {
    oneof messages {
        ConnectReq connect_req = 1;
        ExecuteCommandReq execute_command_req = 2;
        GetFileReq get_file_req = 3;
        PutFileReq put_file_req = 4;
    }
}

message ServerToClient {
    oneof messages {
        ConnectRsp connect_rsp = 1;
        ExecuteCommandRsp execute_command_rsp = 2;
        LogEntryInd log_entry_ind = 3;
        GetFileRsp get_file_rsp = 4;
        PutFileRsp put_file_rsp = 5;
    }
}

message ConnectReq {
    // Requested keep alive timeout in seconds.
    uint32 keep_alive_timeout = 1;
    // Maximum message size in bytes the client can receive. Zero
    // means no limit. Must be at least 64 bytes.
    uint32 maximum_message_size = 2;
}

message ConnectRsp {
    // Final keep alive timeout in seconds.
    uint32 keep_alive_timeout = 1;
    // Maximum message size in bytes the server can receive. Zero
    // means no limit. Must be at least 64 bytes.
    uint32 maximum_message_size = 2;
}

message ExecuteCommandReq {
    // The command string, as "i2c scan /dev/i2c1".
    string command = 1;
}

message ExecuteCommandRsp {
    // Command output. Empty in the last message.
    bytes output = 1;
    // An error occurred if this is not the empty string. Only present
    // in the last message.
    string error = 2;
}

message LogEntryInd {
    // A single log entry.
    repeated string text = 1;
}

message GetFileReq {
    // The file path relative to the root. Empty in other messages.
    string path = 1;
    // The maximum number of response messages in flight to the
    // client. Only present in the first message.
    uint32 window_size = 2;
    // Number of received responses this request acknowledges.
    uint32 acknowledge_count = 3;
}

message GetFileRsp {
    // File size. Only present in the first message.
    uint64 size = 1;
    // File data. Empty in the last message.
    bytes data = 2;
    // An error occurred if this is not the empty string. Only present
    // in the last message.
    string error = 3;
}

message PutFileReq {
    // The file path relative to the root. Only present in the first
    // message.
    string path = 1;
    // File size. Only present in the first message.
    uint64 size = 2;
    // File data. Empty in first and last message.
    bytes data = 3;
}

message PutFileRsp {
    // The maximum number of request messages in flight to the
    // server. Only present in the first message.
    uint32 window_size = 1;
    // An error occurred if this is not the empty string. Only present
    // in the last message.
    string error = 2;
    // Number of received requests this response acknowledges.
    uint32 acknowledge_count = 3;
}
